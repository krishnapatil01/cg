#include <GL/glut.h>

// Rotation angle and speed
float angle = 0.0f;
float speed = 2.0f;

// Display callback
void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glLoadIdentity();

    // Save the current matrix
    glPushMatrix();

    // Apply rotation around the Z-axis
    glRotatef(angle, 0.0f, 0.0f, 1.0f);

    // Draw a square centered at the origin
    glBegin(GL_QUADS);
        glVertex2f(-0.5f, -0.5f);
        glVertex2f( 0.5f, -0.5f);
        glVertex2f( 0.5f,  0.5f);
        glVertex2f(-0.5f,  0.5f);
    glEnd();

    // Restore the matrix
    glPopMatrix();

    glutSwapBuffers(); // Swap buffers for double buffering
}

// Reshape callback
void reshape(int width, int height) {
    glViewport(0, 0, width, height);

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-1.0, 1.0, -1.0, 1.0, -1.0, 1.0); // 2D orthographic projection

    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}

// Timer callback for animation
void update(int value) {
    angle += speed;
    if (angle > 360.0f) {
        angle -= 360.0f;
    }

    glutPostRedisplay();            // Redraw the screen
    glutTimerFunc(16, update, 0);   // Call update after ~16 ms (approx 60 FPS)
}

// Main function
int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutCreateWindow("Rotating Square");

    glClearColor(0.0f, 0.0f, 0.0f, 1.0f); // Black background

    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutTimerFunc(0, update, 0);

    glutMainLoop();
    return 0;
}
